/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.*;

import parser.LinkView;

import tagcommands.*;
import filecommands.*;
import textcommands.*;
import editorproxy.*;
import memento.*;

/**
 *
 * @author Anshul
 */
@SuppressWarnings("serial")
public class EditorGUI extends javax.swing.JFrame {

	private EditorProxy proxy=new EditorProxy();
	
    /**
     * Creates new form EditorGUI
     */
    private EditorGUI() {
        initComponents();
    }
    
    private static EditorGUI instance=new EditorGUI();
    
    public static EditorGUI getInstance(){
    	return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        backPanel = new javax.swing.JPanel();
        autoWrapButton = new javax.swing.JToggleButton();
        autoIndentationButton = new javax.swing.JToggleButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        cut = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        insertTag = new javax.swing.JMenu();
        insertHeaderTag = new javax.swing.JMenuItem();
        insertBoldTag = new javax.swing.JMenuItem();
        JMenuItem showImage = new javax.swing.JMenuItem();
        JMenuItem insertImageTag = new javax.swing.JMenuItem();
        JMenuItem insertAnchorTag = new javax.swing.JMenuItem();
        JMenuItem insertLinkView = new javax.swing.JMenuItem();
        insertItalicTag = new javax.swing.JMenuItem();
        insertTableTag = new javax.swing.JMenuItem();
        insertListTag = new javax.swing.JMenu();
        insertNumberedListTag = new javax.swing.JMenuItem();
        insertBulletedListTag = new javax.swing.JMenuItem();
        insertDictionaryTag = new javax.swing.JMenuItem();
        RunMenu = new javax.swing.JMenu();
        validateHTML = new javax.swing.JMenuItem();
        PreferenceMenu = new javax.swing.JMenu();
        indentationSetting = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout backPanelLayout = new javax.swing.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 381, Short.MAX_VALUE)
        );

        autoWrapButton.setText("Auto-Wrap");
        autoWrapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoWrapButtonActionPerformed(evt);
            }
        });

        autoIndentationButton.setText("Auto-Indentation");
        autoIndentationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoIndentationButtonActionPerformed(evt);
            }
        });
        

        tabbedPane.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                tabbedPaneComponentRemoved(evt);
            }
        });
        tabbedPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabbedPaneKeyPressed(evt);
            }
        });

        FileMenu.setText("File");
        FileMenu.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                FileMenuComponentAdded(evt);
            }
        });
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuActionPerformed(evt);
            }
        });

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setText("New");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        FileMenu.add(newFile);

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setText("Open");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        openFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                openFileKeyPressed(evt);
            }
        });
        FileMenu.add(openFile);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        saveFile.setText("Save");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        FileMenu.add(saveFile);

        jMenuBar1.add(FileMenu);

        EditMenu.setText("Edit");

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        EditMenu.add(cut);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        EditMenu.add(paste);

        showImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        showImage.setText("Show Image");
        showImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showImageActionPerformed(evt);
            }
        });
        EditMenu.add(showImage);
        
        insertLinkView.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        insertLinkView.setText("Link View");
        insertLinkView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLinkViewActionPerformed(evt);
            }
        });
        EditMenu.add(insertLinkView);
        
        insertTag.setText("Insert Tag");

        insertAnchorTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        insertAnchorTag.setText("Anchor");
        insertTag.add(insertAnchorTag);
        insertAnchorTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addAnchorTagActionPerformed(evt);
        	}
        });
        
        insertHeaderTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        insertHeaderTag.setText("Header");
        insertTag.add(insertHeaderTag);
        insertHeaderTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addHeaderTagActionPerformed(evt);
        	}
        });

        insertBoldTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        insertBoldTag.setText("Bold");
        insertTag.add(insertBoldTag);
        insertBoldTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addBoldTagActionPerformed(evt);
        	}
        });

        insertImageTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        insertImageTag.setText("Image");
        insertTag.add(insertImageTag);
        insertImageTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addImageTagActionPerformed(evt);
        	}
        });
        
        insertItalicTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        insertItalicTag.setText("Italic");
        insertTag.add(insertItalicTag);
        insertItalicTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addItalicTagActionPerformed(evt);
        	}
        });
        
               

        insertTableTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        insertTableTag.setText("Table");
        insertTag.add(insertTableTag);
        insertTableTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addTableTagActionPerformed(evt);
        	}
        });

        insertListTag.setText("List");

        insertNumberedListTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK));
        insertNumberedListTag.setText("Numbered");
        insertListTag.add(insertNumberedListTag);
        insertNumberedListTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addNumberedTagActionPerformed(evt);
        	}
        });

        insertBulletedListTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK));
        insertBulletedListTag.setText("Bulleted");
        insertListTag.add(insertBulletedListTag);
        insertBulletedListTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addBulletedTagActionPerformed(evt);
        	}
        });

        insertDictionaryTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK));
        insertDictionaryTag.setText("Dictionary");
        insertListTag.add(insertDictionaryTag);
        insertDictionaryTag.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		addDictionaryTagActionPerformed(evt);
        	}
        });

        insertTag.add(insertListTag);

        EditMenu.add(insertTag);

        jMenuBar1.add(EditMenu);

        RunMenu.setText("Run");

        validateHTML.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        validateHTML.setText("Validate HTML");
        validateHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateHTMLActionPerformed(evt);
            }
        });
        RunMenu.add(validateHTML);

        jMenuBar1.add(RunMenu);

        PreferenceMenu.setText("Preference");

        indentationSetting.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        indentationSetting.setText("Indentation Setting");
        indentationSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indentationSettingActionPerformed(evt);
            }
        });
        PreferenceMenu.add(indentationSetting);

        jMenuBar1.add(PreferenceMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(autoWrapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(autoIndentationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autoWrapButton)
                    .addComponent(autoIndentationButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabbedPane)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void showImageActionPerformed(java.awt.event.ActionEvent evt){
    	// gets selected URL from tabbed pane, and open the file.
    	String url = "";
    	int selected=tabbedPane.getSelectedIndex();
		JScrollPane scroll=(JScrollPane)tabbedPane.getComponentAt(selected);
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		url = area.getSelectedText();
		
	
		try {
			File sourceimage = new File(url);
			Image img = ImageIO.read(sourceimage);
		    JFrame imgFrame = new JFrame(url);
		    JLabel imgLabel = new JLabel(new ImageIcon(img));
		    
		    imgFrame.setSize( img.getWidth(null), img.getHeight(null));
		    imgFrame.add(imgLabel);
	        imgFrame.setVisible(true);
		} catch (IOException e) {}
    }
    
   
    
    
    //TODO add components for this
    private void addAnchorTagActionPerformed(java.awt.event.ActionEvent evt){
    	ArrayList<String> data = getAnchorData();
    	
    	String URL = " href=\""+data.get(0)+"\"";
    	String linkText = data.get(1);
    	//create memento
    	TextState memento=this.createMemento();
    	//create command, pass memento to it
    	AddAnchorTag addTag=new AddAnchorTag(URL, linkText, tabbedPane.getSelectedIndex(),this,memento);
    	//pass command off
    	proxy.handleCommand(addTag);
    }
    
    private void addLinkViewActionPerformed(java.awt.event.ActionEvent evt){
    	LinkView linkView = new LinkView(getText());
    	ArrayList<String> links = linkView.getLinks();
    	int tabNum = tabbedPane.getSelectedIndex();
    	
    	JFrame imgFrame = new JFrame();
	    JTextPane textPane = new JTextPane();
	    textPane.setEditable(false);
	    imgFrame.add(textPane);
	    imgFrame.setSize( 500, 300);
        imgFrame.setVisible(true);
        
    	for(String link : links){
    		link = link+"\n";
    		textPane.setText(textPane.getText()+link);
    	}
    	
    }
    
    //TODO add components for this
    private void addImageTagActionPerformed(java.awt.event.ActionEvent evt){
    	
    	ArrayList<String> imgData = getImgData();
    	
    	//create memento
    	TextState memento=this.createMemento();
    	//create command, pass memento to it
    	AddImageTag addTag=new AddImageTag(imgData.get(0), imgData.get(1), tabbedPane.getSelectedIndex(),this,memento);
    	proxy.handleCommand(addTag);
    }
    
    private void addHeaderTagActionPerformed(java.awt.event.ActionEvent evt){
    	//create memento
    	TextState memento=this.createMemento();
    	//create command, pass memento to it
    	AddSimpleTag addTag=new AddSimpleTag("h1",tabbedPane.getSelectedIndex(),this,memento);
    	//pass command off
    	proxy.handleCommand(addTag);
    }
    
    
    private void addBoldTagActionPerformed(java.awt.event.ActionEvent evt){
    	
    	TextState memento=this.createMemento();
    	AddSimpleTag addTag=new AddSimpleTag("b",tabbedPane.getSelectedIndex(),this,memento);
    	proxy.handleCommand(addTag);
    }
    
    
    private void addItalicTagActionPerformed(java.awt.event.ActionEvent evt){
    	TextState memento=this.createMemento();
    	AddSimpleTag addTag=new AddSimpleTag("em",tabbedPane.getSelectedIndex(),this,memento);
    	proxy.handleCommand(addTag);
    }
    
    
    private void addTableTagActionPerformed(java.awt.event.ActionEvent evt){
    	TextState memento=this.createMemento();
    	//instantiate an addTableTag
    	AddTableTag addTag=new AddTableTag(tabbedPane.getSelectedIndex(),this,memento);
    	//pass the command to the editor proxy
    	proxy.handleCommand(addTag);
    	
    }
    
    
    private void addNumberedTagActionPerformed(java.awt.event.ActionEvent evt){
    	TextState memento=this.createMemento();
    	AddListTag addTag=new AddListTag("ol",tabbedPane.getSelectedIndex(),this,memento);
    	proxy.handleCommand(addTag);
    	
    }
    
    
    private void addBulletedTagActionPerformed(java.awt.event.ActionEvent evt){
    	TextState memento=this.createMemento();
    	AddListTag addTag=new AddListTag("ul",tabbedPane.getSelectedIndex(),this,memento);
    	proxy.handleCommand(addTag);
    }
    

    private void addDictionaryTagActionPerformed(java.awt.event.ActionEvent evt){
    	TextState memento=this.createMemento();
    	//instantiate an addDictTag
    	AddDictTag addTag=new AddDictTag(tabbedPane.getSelectedIndex(),this,memento);
    	//pass the command to the editor proxy
    	proxy.handleCommand(addTag);

    }
    
    
   
    
   
   
    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
    	//get the cut text
    	JScrollPane scroll=(JScrollPane) tabbedPane.getComponentAt(tabbedPane.getSelectedIndex());
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		String cutText=area.getSelectedText();
		//get the start
		int start=area.getSelectionStart();
		//get the end
		int end=area.getSelectionEnd();
		//get textBefore
		String textBefore=area.getText().substring(0,start);
		//get textAfter
		String textAfter=area.getText().substring(end,area.getText().length());
    	//create memento
		TextState memento=this.createMemento();
		//create CutText command object
		CutText cut=new CutText(textBefore,textAfter,cutText,tabbedPane.getSelectedIndex(),this,proxy,memento);
		//pass it to the proxy
		proxy.handleCommand(cut);
    	
    	
        
    }//GEN-LAST:event_cutActionPerformed

    private void autoIndentationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoIndentationButtonActionPerformed
        // Action listener for auto indentation button
    }//GEN-LAST:event_autoIndentationButtonActionPerformed

    private void autoWrapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoWrapButtonActionPerformed
        // Action listener for Auto Wrap button
    }//GEN-LAST:event_autoWrapButtonActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        
    	//create NewFile command
        OpenFile openfile=new OpenFile(this);
        //pass command to proxy
        proxy.handleCommand(openfile);
    
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
       
    	//create NewFile command
        SaveFile savefile=new SaveFile(this);
        //pass command to proxy
        proxy.handleCommand(savefile);
    
    }
    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        //create NewFile command
        NewFile newfile=new NewFile(this);
        //pass command to proxy
        proxy.handleCommand(newfile);
    }//GEN-LAST:event_newFileActionPerformed

    
    
    private void FileMenuComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_FileMenuComponentAdded
        // NO IMPLEMENTATION NEEDED
    }//GEN-LAST:event_FileMenuComponentAdded

    private void FileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuActionPerformed
        // NO IMPLEMENTATION NEEDED
    }//GEN-LAST:event_FileMenuActionPerformed

    private void openFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_openFileKeyPressed
        // Wrong listner placed --> Go to openFileActionPerformed
    }//GEN-LAST:event_openFileKeyPressed

    private void tabbedPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabbedPaneKeyPressed
        
        
        if( evt.getKeyCode() == java.awt.event.KeyEvent.VK_F1)  //Closes teh tab on pressing F1 key
        {
            System.out.println("Closing file");
            if( 1 != 0) {
                JFileChooser chooser = new JFileChooser();      // Prompts user to save file before closing
    
                int returnVal = chooser.showSaveDialog(null);
                if(returnVal == JFileChooser.APPROVE_OPTION) {
                System.out.println("Saving file " +
                chooser.getSelectedFile().getName());
                }   
            tabbedPane.remove(tabbedPane.getSelectedComponent());
            }
        }
    }//GEN-LAST:event_tabbedPaneKeyPressed

    private void tabbedPaneComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tabbedPaneComponentRemoved
        // NO IMPLEMTATION NEEDED
    }//GEN-LAST:event_tabbedPaneComponentRemoved

    
  
    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed

    	JScrollPane scroll=(JScrollPane) tabbedPane.getComponentAt(tabbedPane.getSelectedIndex());
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		int start=area.getSelectionStart();
		String textBefore=area.getText().substring(0,start);
		String textAfter=area.getText().substring(start,area.getText().length());
    	//create memento
		TextState memento=this.createMemento();
    	//create object
		PasteText paste=new PasteText(textBefore,textAfter,tabbedPane.getSelectedIndex(),this,proxy,memento);
		//pass it to proxy
    	proxy.handleCommand(paste);
    	
        
        
    }//GEN-LAST:event_pasteActionPerformed

    private void validateHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateHTMLActionPerformed
        // Action Listener to check for correct HTML format.
    }//GEN-LAST:event_validateHTMLActionPerformed

    private void indentationSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indentationSettingActionPerformed
        // Prompts a window to change setting for indentation. For manual indentation.
    }//GEN-LAST:event_indentationSettingActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu PreferenceMenu;
    private javax.swing.JMenu RunMenu;
    private javax.swing.JToggleButton autoIndentationButton;
    private javax.swing.JToggleButton autoWrapButton;
    private javax.swing.JPanel backPanel;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenuItem indentationSetting;
    private javax.swing.JMenuItem insertBoldTag;
    private javax.swing.JMenuItem insertBulletedListTag;
    private javax.swing.JMenuItem insertDictionaryTag;
    private javax.swing.JMenuItem insertHeaderTag;
    private javax.swing.JMenuItem insertItalicTag;
    private javax.swing.JMenu insertListTag;
    private javax.swing.JMenuItem insertNumberedListTag;
    private javax.swing.JMenuItem insertTableTag;
    private javax.swing.JMenu insertTag;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem saveFile;
    public javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JMenuItem validateHTML;
    // End of variables declaration//GEN-END:variables
	
	public void addPane(String tabName){
    	JTextArea area=new JTextArea();
    	JScrollPane scroll=new JScrollPane(area,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    	tabbedPane.addTab(tabName,scroll);
    	
    }
	
	public void addText(String text, int tabNum){
		JScrollPane scroll=(JScrollPane) tabbedPane.getComponentAt(tabNum);
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		area.append(text);
		area.setCaretPosition(area.getDocument().getLength());
	}
	
	public void replaceText(String replace,int tabNum){
		JScrollPane scroll=(JScrollPane)tabbedPane.getComponentAt(tabNum);
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		area.setText(replace);
	}
	
	public String getText(){
		int selected=tabbedPane.getSelectedIndex();
		JScrollPane scroll=(JScrollPane)tabbedPane.getComponentAt(selected);
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		return area.getText();
	}
	
	public int getCaretPosition(){
		int selected=tabbedPane.getSelectedIndex();
		JScrollPane scroll=(JScrollPane)tabbedPane.getComponentAt(selected);
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		return area.getCaretPosition();
	}

	public void setCaret(int caret) {
		int selected=tabbedPane.getSelectedIndex();
		JScrollPane scroll=(JScrollPane)tabbedPane.getComponentAt(selected);
		JViewport viewport=scroll.getViewport();
		JTextArea area=(JTextArea)viewport.getView();
		area.setCaretPosition(caret);
		
	}
	
	public TextState createMemento(){
		return new TextState(this.getText(),this.getCaretPosition());
	}
	
	public ArrayList<String> getImgData(){
		String src = "";
		String imgName = "";
		ArrayList<String> imgInfo = new ArrayList<String>();
		JFileChooser chooser = new JFileChooser();
		int returnVal = chooser.showOpenDialog(null);
		
		 if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = chooser.getSelectedFile();
			src = file.getPath();
			imgName = file.getName();
		 }
		 imgInfo.add(src);
		 imgInfo.add(imgName);
		return imgInfo;
	}
	
	public ArrayList<String> getAnchorData(){
		String url = "";
		String text = "";
		ArrayList<String> anchorData = new ArrayList<String>();
		
		url = JOptionPane.showInputDialog("Enter URL");
		text = JOptionPane.showInputDialog("Enter link text");
		anchorData.add(url);
		anchorData.add(text);
		
		return anchorData;
	}
}
